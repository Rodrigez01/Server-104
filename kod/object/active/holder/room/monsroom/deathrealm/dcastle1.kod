// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
DeathRealmCastle1 is DeathRealm

constants:

   include blakston.khd

resources:

   room_DeathRealm_Castle1 = castle1.roo
   Complete_Death_Realm = \ 
       "You must complete the Death Realm challenge before Qor will allow you the privilege of leaving with your life."
   Beat_DR_Final = \
        "Qor is impressed and allows you to leave the Death Realm."   

classvars:

   viTeleport_row = 13
   viTeleport_col = 18

   viWeatherZone = WEATHER_ZONE_CV
   viWeatherMask = WEATHER_MASK_MOUNTAINS

properties:

   prRoom = room_DeathRealm_Castle1
   piRoom_num = RID_DCASTLE1
   prMapChanges = FALSE

   pbMobUseDoors = TRUE

messages:

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 6, 17, RID_DTHRONE1, 22, 6, ROTATE_NONE ],plExits);
      plExits = Cons([ 6, 18, RID_DTHRONE1, 22, 6, ROTATE_NONE ],plExits);
      plExits = Cons([ 6, 19, RID_DTHRONE1, 22, 6, ROTATE_NONE ],plExits);

      plExits = Cons([ 1, 17, RID_DCASTLE4, 8, 23, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 17, RID_DCASTLE4, 8, 23, ROTATE_NONE ],plExits);
      plExits = Cons([ 1, 19, RID_DCASTLE4, 8, 28, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 19, RID_DCASTLE4, 8, 28, ROTATE_NONE ],plExits);

      plExits = Cons([ 16, 16, RID_DCASTLE, 4, 43, ROTATE_90 ],plExits);
      plExits = Cons([ 16, 17, RID_DCASTLE, 4, 43, ROTATE_90 ],plExits);
      plExits = Cons([ 16, 18, RID_DCASTLE, 4, 43, ROTATE_90 ],plExits);
      plExits = Cons([ 16, 19, RID_DCASTLE, 4, 43, ROTATE_90 ],plExits);

      plExits = Cons([ 12, 1, RID_DCASTLE3, 7, 15, ROTATE_NONE ],plExits);
      plExits = Cons([ 12, 2, RID_DCASTLE3, 7, 15, ROTATE_NONE ],plExits);
      plExits = Cons([ 13, 1, RID_DCASTLE3, 7, 15, ROTATE_NONE ],plExits);
      plExits = Cons([ 13, 2, RID_DCASTLE3, 7, 15, ROTATE_NONE ],plExits);

      plExits = Cons([ 9, 4, RID_DCASTLE1,  7, 4, ROTATE_NONE ],plExits);
      plExits = Cons([ 8, 4, RID_DCASTLE1, 10, 4, ROTATE_NONE ],plExits);

      plExits = Cons([ 9, 10, RID_DCASTLE1, 7, 10, ROTATE_NONE ],plExits);
      plExits = Cons([ 8, 10, RID_DCASTLE1, 10, 10, ROTATE_NONE ],plExits);

      plExits = Cons([ 9, 26, RID_DCASTLE1, 7, 26, ROTATE_NONE ],plExits);
      plExits = Cons([ 8, 26, RID_DCASTLE1, 10, 26, ROTATE_NONE ],plExits);

      plExits = Cons([ 9, 32, RID_DCASTLE1, 7, 32, ROTATE_NONE ],plExits);
      plExits = Cons([ 8, 32, RID_DCASTLE1, 10, 32, ROTATE_NONE ],plExits);

      plExits = Cons([ 4, 33, ROOM_LOCKED_DOOR, Complete_Death_Realm ],plExits);

      propagate;
   }

   SomethingMoved(what = $, new_row = $, new_col = $, fine_row = FINENESS/2,
                  fine_col = FINENESS/2, cause = CAUSE_UNKNOWN, speed = 0,
                  non_monsters_only = FALSE)
   {
      // Moves monsters through the doors. If this message is modified,
      // take care not to choose new_row values that would cause an infinite
      // loop. Random check also present to help prevent that from happening
      // by mistake, and to stop the mobs potentially moving back and forward
      // quickly. This can be turned on/off via pbMobUseDoors.
      if (NOT pbMobUseDoors)
      {
         propagate;
      }

      if IsClass(what,&Monster)
      {
         if (new_row = 9
               OR new_row = 8)
            AND (new_col = 4
               OR new_col = 10
               OR new_col = 26
               OR new_col = 32)
         {
            if Random(1,5) = 1
            {
               if (new_row = 9)
               {
                  Send(self,@SomethingMoved,#what=what,
                        #new_row=7,#new_col=new_col,
                        #fine_row=fine_row,#fine_col=fine_col,
                        #speed=speed);
               }
               else
               {
                  Send(self,@SomethingMoved,#what=what,
                        #new_row=10,#new_col=new_col,
                        #fine_row=fine_row,#fine_col=fine_col,
                        #speed=speed);
               }

               return;
            }
         }
      }

      propagate;
   }

   ReqSomethingAttack(what = $,victim = $,use_weapon = $,stroke_obj = $)
   "Disallow attacks between the two parts of the room. "
   {
      local iWhatRow, iWhatCol, iVicRow, iVicCol, iTmp;
      if (what = $
         OR victim = $)
      {
         propagate;
      }

      iWhatRow = Send(what,@GetRow);
      iWhatCol = Send(what,@GetCol);
      iVicRow = Send(victim,@GetRow);
      iVicCol = Send(victim,@GetCol);
      if (iWhatRow = $
         OR iWhatCol = $
         OR iVicRow = $
         OR iVicCol = $)
      {
         propagate;
      }
      
      if (iWhatRow >= 9 AND iVicRow >= 9)
      {
         propagate;
      }

      if (iWhatRow >= 9)
      {
         iTmp = iWhatRow;
         iWhatRow = iVicRow;
         iVicRow = iTmp;
         iTmp = iWhatCol;
         iWhatCol = iVicCol;
         iVicCol = iTmp;
      }

      if (iWhatRow < 9)
      {
         if (iWhatCol < 8)
         {
            if (iVicRow > 8
               OR iVicCol > 7)
            {
               return FALSE;
            }

            propagate;
         }

         if (iWhatCol < 13)
         {
            if (iVicRow > 8
               OR iVicCol < 8
               OR iVicCol > 12)
            {
               return FALSE;
            }

            propagate;
         }

         if (iWhatCol > 23
            AND iWhatCol < 30)
         {
            if (iVicRow > 8
               OR iVicCol < 24
               OR iVicCol > 29)
            {
               return FALSE;
            }

            propagate;
         }

         if (iWhatCol > 29
            AND iWhatCol < 35)
         {
            if (iVicRow > 8
               OR iVicCol < 30
               OR iVicCol > 34)
            {
               return FALSE;
            }

            propagate;
         }

         if (iVicCol > 12
               OR iVicCol < 24)
         {
            propagate;
         }
      }

      return FALSE;
   }

   SomethingTryGo(what=$,row=$,col=$)
   {
      local i, each_obj;

      if (IsClass(what,&User)
         AND (row = 4 AND col = 33))
      {
          if send(what,@HasBeatDR)
		    OR IsClass(what,&DM)
		  {		 
			 Send(what,@MsgSendUser,#message_rsc=Beat_DR_Final);
             Send(SYS,@UtilGoNearSquare,#what=what,
                    #where=Send(SYS,@FindRoomByNum,#num=RID_DCASTLE2),
                    #new_row=25,#new_col=2,#fine_row=35, #fine_col=35, #new_angle=ANGLE_NORTH);
			 
			 return TRUE;
		  }
      }
   		  
 	   propagate;
    }

end
////////////////////////////////////////////////////////////////////////////////
