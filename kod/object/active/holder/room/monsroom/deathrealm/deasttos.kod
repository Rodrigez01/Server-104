// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.
////////////////////////////////////////////////////////////////////////////////
DeathRealmEastTos is DeathRealm

constants:

   include blakston.khd

resources:
   room_DeathRealm_EastTos = toseast.roo

   DeathRealm_wind_sound_easttos = ambcntry.ogg
   DeathRealm_wind1_sound_easttos = rs_wind.ogg

classvars:

   viTeleport_row = 27
   viTeleport_col = 16

   viWeatherMask = WEATHER_MASK_DEFAULT

properties:

   prRoom = room_EastTos
   piRoom_num = RID_DTOS_EAST

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

messages:

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 8,7, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 12,15, ROOM_LOCKED_DOOR ],plExits);

      plExits = Cons([ 40, 8, ROOM_LOCKED_DOOR ],plExits);

      plExits = Cons([ 19, 7, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 18, 7, ROOM_LOCKED_DOOR ],plExits);

      plExits = Cons([ 7, 34, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 7, 35, ROOM_LOCKED_DOOR ],plExits);

      plExits = Cons([ 28, 3, ROOM_LOCKED_DOOR, Needs_Key ],plExits);
      plExits = Cons([ 29, 3, ROOM_LOCKED_DOOR, Needs_Key ],plExits);

      plExits = Cons([ 28, 25, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 29, 25, ROOM_LOCKED_DOOR ],plExits);

      plExits = Cons([ 40, 36, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 40, 37, ROOM_LOCKED_DOOR ],plExits);

      plExits = Cons([ 17, 35, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 17, 36, ROOM_LOCKED_DOOR ],plExits);

      plExits = Cons([ 28, 51, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 29, 51, ROOM_LOCKED_DOOR ],plExits);
	  
	  plEdge_Exits = $;
	  
	  plEdge_Exits = Cons([ LEAVE_SOUTH, RID_DI6, 2, 47, ANGLE_SOUTH ], plEdge_exits);

      propagate;
   }

   SomethingTryGo(what=$,row=$,col=$)
   {
      local i, each_obj;

      if (IsClass(what,&User)
         AND (row = 29 AND col = 3) OR (row = 28 AND col = 3))
      {
         if send(what,@HasBeatDR)
		      OR IsClass(what,&DM)
		   {
		      Send(what,@MsgSendUser,#message_rsc=Beat_DR);

			   Send(SYS,@UtilGoNearSquare,#what=what,
                #where=Send(SYS,@FindRoomByNum,#num=RID_DTOS),
                #new_row=57,#new_col=39,#new_angle=ANGLE_WEST);
   
			   return TRUE;
		   }

   		foreach i in Send(what,@GetHolderPassive)
         {
            each_obj = Send(what,@HolderExtractObject,#data=i);

            if IsClass(each_obj,&TosKey)
            {
               Send(what,@MsgSendUser,#message_rsc=Key_Open);
               Send(SYS,@UtilGoNearSquare,#what=what,
                   #where=Send(SYS,@FindRoomByNum,#num=RID_DTOS),
                   #new_row=57,#new_col=39,#new_angle=ANGLE_WEST);

               return TRUE;
            }
         }
		}

 		propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
