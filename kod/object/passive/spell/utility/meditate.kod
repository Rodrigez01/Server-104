// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Meditate is UtilitySpell

constants:

   include blakston.khd

   TRANCE_TIME = 20000

resources:

   include meditate.lkod

   Meditate_name_rsc = "meditate"
   Meditate_icon_rsc = imeditate.bgf
   Meditate_desc_rsc = \
      "Allows you to channel your experience in meditation in order to "
      "open your mind and improve your abilities.  To do so, speak the "
      "name of the ability you wish to improve while in trance.  \n\n"
      "Say a number up to 9 to advance the ability that many improvements. "
      "Not saying a number will spend all available training points. "

   Meditate_begin_trance = \
      "You begin your meditation and let your mind wander.  Which ability "
      "will you focus your meditation on?"
   Meditate_cast_success = \
      "You begin to meditate on the art of %s and come to a deeper "
      "understanding of its intricacies.  You have improved your ability "
      "by ~B%i~B points."
   Meditate_cast_failure = \
      "You can't seem to properly focus your mind.  Confused and "
      "disappointed, you wake from your trance."
   Meditate_not_enough_points = \
      "You begin to meditate on the art of %s, but seem to lack the "
      "inspiration to advance in your studies."
   Meditate_maxed_skill = \
      "You begin to meditate on the art of %s, but cannot possibly "
      "progress any further in its mastery."
   Meditate_cast_finished = \
      "You wake from your trance and feel your mental energies refreshed!"
   fails_notnumbers = "You may only say a number between 1-98"
   Amount_to_imp = "How many improvements would you like?"

classvars:

   vrName = Meditate_name_rsc
   vrIcon = Meditate_icon_rsc
   vrDesc = Meditate_desc_rsc

   viSpell_num = SID_MEDITATE
   viSchool = SS_FAREN
   viSpell_level = 1
   viMana = 0
   viSpellExertion = 0

   viFlash = FLASH_GOOD
   viMeditate_ratio = 10

properties:

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   SuccessChance(who=$)
   "Starter spell will always work."
   {
      return TRUE;
   }

   ImproveAbility()
   "We only improve if we have exchanged training points."
   {
      return FALSE;
   }

   GetTranceTime(iSpellpower=0,who=$)
   {
      return viCast_time;
   }

   BeginCastingTrance(who=$,lTargets=$,iSpellpower=$)
   {
      local oTrance;

      Send(who,@BreakTrance,#event=EVENT_STEER);
      Send(who,@SetMeditating,#iNum=$);

      oTrance = Send(SYS,@FindSpellByNum,#num=SID_TRANCE);

      Send(oTrance,@BeginCastingTrance,#what=self,#who=who,
            #lTargets=$,#time=TRANCE_TIME);

      Send(who,@MsgSendUser,#message_rsc=Meditate_begin_trance);

      propagate;
   }

   SomethingSaidDuringTrance(who=$,string=$,lTargets=$)
   {
      local i, bFound, oSpell, oSkill, sAbility, bType, iGain, iNum,
      iPoints, iAmount, iFull_Amount, iRatio, iPercent, oAbility;

      iAmount = $;

      iPoints = Send(who,@GetTrainingPoints);
      oAbility = Send(who,@GetMeditating);

      if oAbility = $
      {
         foreach i in Send(who,@GetSkillList)
         {
            iNum = Send(who,@DecodeSkillNum,#compound=i);
            oSkill = Send(SYS,@FindSkillByNum,#num=iNum);
            sAbility = Send(oSkill,@GetName);
            
            if StringEqual(string,sAbility)
            {
               bFound = TRUE;
               iPercent = Send(oSkill,@GetAbility,#who=who);
               iRatio = Send(oSkill,@GetMeditateRatio);

               if iPercent = 99
               {
                  Send(who,@MsgSendUser,#message_rsc=Meditate_maxed_skill,
                        #parm1=sAbility);
                  Send(who,@BreakTrance,#event=EVENT_STEER);
                  Send(who,@SetMeditating,#iNum=$);

                  return;
               }

               if iRatio = 0
               { 
                  Send(who,@MsgSendUser,#message_rsc=Meditate_cast_failure);
                  Send(who,@BreakTrance,#event=EVENT_STEER);
                  Send(who,@SetMeditating,#iNum=$);

                  return;
               }

               Send(who,@SetMeditating,#iNum=oSkill);
               Send(self,@SecondCastingTrance,#who=who,#lTargets=lTargets,#iSpellpower=1);
            }
         }

         if bFound <> TRUE
         {
            foreach i in Send(who,@GetSpellList)
            {
               iNum = Send(who,@DecodeSpellNum,#compound=i);
               oSpell = Send(SYS,@FindSpellByNum,#num=iNum);
               sAbility = Send(oSpell,@GetName);

               if StringEqual(string,sAbility)
               {
                  bFound = TRUE;
                  iPercent = Send(oSpell,@GetAbility,#who=who);
                  iRatio = Send(oSpell,@GetMeditateRatio);

                  if iPercent = 99
                  {
                     Send(who,@MsgSendUser,#message_rsc=Meditate_maxed_skill,
                           #parm1=sAbility);
                     Send(who,@BreakTrance,#event=EVENT_STEER);
                     Send(who,@SetMeditating,#iNum=$);

                     return;
                  }

                  if iRatio = 0
                  { 
                     Send(who,@MsgSendUser,#message_rsc=Meditate_cast_failure);
                     Send(who,@BreakTrance,#event=EVENT_STEER);
                     Send(who,@SetMeditating,#iNum=$);

                     return;
                  }

                  Send(who,@SetMeditating,#iNum=oSpell);
                  Send(self,@SecondCastingTrance,#who=who,#lTargets=lTargets,#iSpellpower=1);

                  break;
               }
            }
         }

         if bFound <> TRUE
         {
            Send(who,@MsgSendUser,#message_rsc=Meditate_cast_failure);
            Send(who,@BreakTrance,#event=EVENT_STEER);
            Send(who,@SetMeditating,#iNum=$);
         }

         return;
      }
      else
      {
         

         iPercent = Send(oAbility,@GetAbility,#who=who);
         iRatio = Send(oAbility,@GetMeditateRatio);
         sAbility = Send(oAbility,@GetName);

         if NOT StringConsistsOf(string,"1234567890")
         {
            Send(who,@MsgSendUser,#message_rsc=fails_notnumbers);
            Send(who,@BreakTrance,#event=EVENT_STEER);
            Send(who,@SetMeditating,#iNum=$);

            return;
         }

         iAmount = StringToNumber(string);

         if iAmount <= 0 OR iAmount = $ OR iAmount > 98 
         {
            Send(who,@MsgSendUser,#message_rsc=fails_notnumbers);
            Send(who,@BreakTrance,#event=EVENT_STEER);
            Send(who,@SetMeditating,#iNum=$);

            return;
         }

         iFull_Amount = iRatio * iAmount;
         
         if iPoints < iFull_Amount
         {
            if iPoints >= iRatio
            {
               iAmount = iPoints/iRatio;
               iFull_Amount = iRatio * iAmount;
            }
            else
            {
               Send(who,@MsgSendUser,#message_rsc=Meditate_not_enough_points,
                        #parm1=sAbility);
               Send(who,@BreakTrance,#event=EVENT_STEER);
               Send(who,@SetMeditating,#iNum=$);

               return;
            }
         }

         iGain = iAmount;
         
         if iGain > 99 - iPercent
         {
            iGain = 99 - iPercent;
         }

         Send(who,@MsgSendUser,#message_rsc=Meditate_cast_success,
               #parm1=sAbility,#parm2=iGain);

         if IsClass(oAbility,&Spell)
         {
            oAbility = Send(oAbility,@GetSpellNum);
            Send(who,@ChangeSpellAbility,#spell_num=oAbility,
                  #amount=iGain,#report=FALSE);
         }
         else
         {
            oAbility = Send(oAbility,@GetSkillNum);
            Send(who,@ChangeSkillAbility,#Skill_num=oAbility,
                  #amount=iGain,#report=FALSE);
         }

         Send(who,@AddTrainingPoints,#points=(-iGain*iRatio));

         if iGain*iRatio > Random(0,99)
         AND NOT StringEqual(string,Meditate_name_rsc)
         {
            Send(who,@ChangeSpellAbility,#spell_num=vispell_Num,
                  #amount=1,#report=TRUE);
         }
      }

      Send(who,@BreakTrance,#event=EVENT_STEER);
      Send(who,@SetMeditating,#iNum=$);
      return;
   }

   SecondCastingTrance(who=$,lTargets=$,iSpellpower=$)
   {
      local oTrance;

      Send(who,@BreakTrance,#event=EVENT_STEER);

      oTrance = Send(SYS,@FindSpellByNum,#num=SID_TRANCE);

      Send(who,@MsgSendUser,#message_rsc=Amount_to_imp);

      Send(oTrance,@BeginCastingTrance,#what=self,#who=who,
            #lTargets=$,#time=TRANCE_TIME);

      return;
   }

   DoubleCheckAfterTrance(who=$,lTargets=$)
   {
      local iMana, iPercent;

      iMana = Send(who,@GetMaxMana);
      iPercent = Send(self,@GetAbility,#who=who);

      if NOT Send(who,@IsCrystalizeManaSurging)
      {
         Send(who,@GainMana,#amount=iMana*iPercent/100,
               #bCapped=TRUE);
      }
      Send(who,@MsgSendUser,#message_rsc=Meditate_cast_finished);

      return;
   }

   TranceBlocksSay()
   {
      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
